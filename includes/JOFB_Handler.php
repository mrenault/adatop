<?php 

require_once(dirname(__FILE__) . '/JOFB_Base.php');

class JOFB_Handler extends JOFB_Base {

    //form configuration fields
    protected $formFields;
    
    //form configuration options
    protected $formOptions;
    
    //total cost of order configuration
    protected $totalCost = 0;
    
    //unique id
    protected $uuid;
    
    //config settings
    protected $defaultConfig = array(
        'upload_errors' => array(
            UPLOAD_ERR_INI_SIZE => 'The uploaded file exceeds the upload_max_filesize directive in php.ini.',
            UPLOAD_ERR_FORM_SIZE => 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.',
            UPLOAD_ERR_PARTIAL => 'The uploaded file was only partially uploaded.',
            UPLOAD_ERR_NO_FILE => 'No file was uploaded.',
            UPLOAD_ERR_NO_TMP_DIR => 'Missing a temporary folder.',
            UPLOAD_ERR_CANT_WRITE => 'Failed to write file to disk.',
            UPLOAD_ERR_EXTENSION => 'A PHP extension stopped the file upload.',
        ),
        'messages' => array(
            'fail' => '<p>There has been an error submitting your email message. Please <a href="mailto:{{adminEmail}}?subject={{subject}}">click here</a> to try another way. Paste this message into the email that comes up:</p><pre style="border: 1px solid #444">{{message}}</pre>',
            'success' => '<p>Thanks for your message! We\'ve received it and will get back to you as soon as possible.</p>',
            'return' => '<br><p>Once you\'re ready, feel free to go back to <a href="{{returnUrl}}">our website</a></p>',
        ),
    );
    
    //array of uploaded files
    protected $uploadedFiles = array();
    
    public function __construct($data, $config){
    
        $this->setConfig($config);
        
        //fix magic quotes
        $this->fixMagicQuotes();
        
        $this->uuid = uniqid();
    
        //json encoded fields generated by ofb script
        $this->specialFields = $data['specialFields'];
    
        //json encoded fields generated by ofb script
        $this->formFields = $data['fields'];
        
        //json encoded options generated by ofb script
        $this->formOptions = $data['options'];
        
        //format data
        $this->formatData();
        
        //handle all file uploads
        $this->handleFileUploads();
        
        //format the email data    
        $this->formatEmailData();
        
        //render the email
        $this->sendEmails();
        
    }
    
    private function handleFileUploads(){
        $dir = $this->config['uploadDirectory'];
        $webDir = $this->config['webUploadDirectory'];
        foreach($this->formFields as &$group){
            foreach($group['values'] as $idx => &$option){
                if($option['type'] !== 'file'){
                    continue;
                }
                $file = @$_FILES[$option['name']];
                if(!isset($file)){
                    continue;
                }
                if($file['error'] === UPLOAD_ERR_OK){
                    $name = $file['name'];
                } else {
                    $name = $this->config['upload_errors'][$file['error']];
                }
                $option['value'] = $option['label'] = $name;
                $option['data'][0]['value'] = $name;
                $option['data'][0]['label'] = $name;
                if($file['error'] !== 0){
                    continue;
                }
                $newDir = $dir . $this->uuid . '/';
                mkdir($newDir);
                $newPath = $newDir . $file['name'];
                move_uploaded_file($file['tmp_name'], $newPath);
                $webPath = str_replace($dir, $webDir, $newPath);
                $option['link'] = $webPath;
                $this->uploadedFiles []= $option;
            }
        }
    }
    
    private function validateEmail($email){
        return (filter_var($email, FILTER_VALIDATE_EMAIL) !== false);
    }
    
    private function addFirstAndLastKeys(){
        $this->uploadedFiles[count($this->uploadedFiles)-1]['last'] = true;
        $this->uploadedFiles[0]['first'] = true;
        
        $groupLength = count($this->formFields);
        foreach($this->formFields as $idx1 => &$group){
            if($idx1 === 0){
                $group['first'] = true;
            }
            if($idx1 === $groupLength-1){
                $group['last'] = true;
            }
            $optionsLength = count($group['values']);
            foreach($group['values'] as $idx2 => &$option){
                if($idx2 === 0){
                    $option['first'] = true;
                }
                if($idx2 === $optionsLength-1){
                    $option['last'] = true;
                }
            }
        }
    }
    
    //function to send email(s)
    private function sendEmails(){
        
        $emails = array(
            'admin' => array(
                'to' => $this->formOptions['form']['adminEmail'],
                'template' => $this->formOptions['templates']['adminEmailTemplate']
            )
        );
        
        $sendCustomerEmail = isset($this->emailData['sp_email']) && $this->formOptions['form']['sendCustomerEmail'];
        
        if($sendCustomerEmail){
            if($this->validateEmail($this->emailData['sp_email'])){
                $emails['customer'] = array(
                    'to' => $this->emailData['sp_email'],
                    'template' => $this->formOptions['templates']['customerEmailTemplate']
                );
            }
        }
        
        foreach($emails as $key => &$value){
            $email = $this->renderEmail($value);
            
            $value['email'] = $email;
            
            //attempt to send the email
            $value['send_error'] = !mail($email['to'], $email['subject'], $email['message'], $email['headers']);
        }
        
        $view = array(
            'message' => $emails['admin']['email']['message'],
            'adminEmail' => $this->formOptions['form']['adminEmail'],
            'subject' => $emails['admin']['email']['subject'],
            'returnUrl' => $this->formOptions['form']['returnUrl'],
        );
        
        $failMessage = $this->renderTemplate($this->config['messages']['fail'], $view);
        $successMessage = $this->renderTemplate($this->config['messages']['success'], $view);
        $returnMessage = $this->renderTemplate($this->config['messages']['return'], $view);
        
        if($emails['admin']['send_error']){
            echo $failMessage;
        } else {
            if($this->formOptions['form']['autoRedirect']){
                header('Location: ' . $this->formOptions['form']['returnUrl']);
                exit;
            }
            echo $successMessage;
        }
        
        echo $returnMessage;
    }
    
    //function to get contents of a variable pair
    private function getVariableContents($var, &$template, $method='match'){
        $matches = array();
        preg_match('/\{{#'.$var.'\}}(.+?)\{{\/'.$var.'\}}/s', $template, $matches);
        
        if($method === 'remove'){
            $template = preg_replace('/\{{#'.$var.'\}}.+?\{{\/'.$var.'\}}/s', '', $template);
        }
        return $matches[1];
    }
    
    private function getSpecialFieldsAsVars(){
        $vars = array();
        foreach($this->specialFields as $specialName => $field){
            $vars['sp_' . $specialName] = $this->getData($field);
        }
        return $vars;
    }
    
    private function getCost($value, $option){
        $type = $option['type'];
        $isMulti = isset($option['values']);
        $isNumeric = $type === 'slider' || $type === 'spinner';        
        
        if($isMulti){
            foreach($option['values'] as $val){
                if($val['label'] === $value){
                    return array(
                        'cost' => (float) $val['cost']
                    );
                }
            }
        } else if ($isNumeric){
            $q = (float) $value;
            $unitCost = (float) $option['cost'];
            
            return array(
                'quantity' => $q,
                'unitCost' => $unitCost,
                'cost' => $q * $unitCost
            );
        }
        
        return null;
    }
    
    private function formatData(){
    
        $this->totalCost = 0;
        foreach($this->formFields as $idx1 => &$group){
            $groupUnitCost = 0;
            foreach($group['values'] as $idx2 => &$option){
                $values = $this->getData($option['name']);
                
                if(!is_array($values)){
                    $values = array($values);
                }
                
                $data = array();
                
                foreach($values as $key => $value){
                    $val = $this->getCost($value, $option);
                    $val['label'] = $val['value'] = $value;
                    
                    if($key > 0){
                        $val['title'] = '';
                    }
                    
                    if(!isset($val['quantity'])){
                        $val['quantity'] = '';
                    }
                    
                    if(isset($val['cost']) && is_numeric($val['cost'])){
                        $groupUnitCost += $val['cost'];
                    }
                    
                    $data []= $val;
                }
                
                $option['data'] = $data;
            }
            
            $group['groupUnitCost'] = $groupUnitCost;
            
            if(isset($group['quantity'])){
                $q = (float) $this->getData($group['quantity']['name']);
                $group['groupQuantity'] = $q;
                $group['groupCost'] = $q * $groupUnitCost;
            } else {
                $group['groupCost'] = $group['groupUnitCost'];
            }
            
            $this->totalCost += $group['groupCost'];
        }
    }
    
    private function formatAllCosts(&$data){
        array_walk_recursive_full($data, array($this, 'renderPrices'));
    }
    
    public function renderPrices($item){
        if(!is_array($item)){
            return $item;
        }
        
        $costs = array(
            'cost' => 'costFormatted',
            'groupUnitCost' => 'groupUnitCostFormatted',
            'groupCost' => 'groupCostFormatted',
            'totalCost' => 'totalCostFormatted',
            'unitCost' => 'unitCostFormatted'
        );
        
        foreach($costs as $cost => $formatted){
            if(!isset($item[$cost])){
                continue;
            }
            
            $item[$formatted] = $this->formatPrice($item[$cost]);
        }
        
        return $item;
    }
    
    private function formatEmailData(){
    
        //add last keys to array children for templating
        $this->addFirstAndLastKeys();
        
        //TODO: add commented variables
        $this->variables = array(
            // 'customerName' => '', etc.
            'ipAddress' => $_SERVER['REMOTE_ADDR'],
            'date' => date($this->formOptions['form']['dateFormat']),
            'totalCost' => $this->totalCost
        );
        
        $this->specialFieldVariables = $this->getSpecialFieldsAsVars();
    
        $data = array(
            'files' => array(
                'files_list' => array()
            ),
            'options' => array()
        );
        
        $data = array_merge($this->formOptions['form'], $this->variables, $this->specialFieldVariables, $data);
        
        $data['options'] = $this->formFields;
        $data['files']['files_list'] = $this->uploadedFiles;
        
        if(count($data['files']['files_list']) === 0){
            unset($data['files']['files_list']);
        }
        
        $this->formatAllCosts($data);
        
        $this->emailData = $data;
    }
    
    //function to render email
    private function renderEmail($options){
        
        //get the subject line from the
        $subject = $this->getVariableContents('subject', $options['template'], 'remove');
        
        //build the headers
        $headers = 'From: '.$this->formOptions['form']['fromEmail']."\r\n";

        // Always set content-type when sending HTML email
        $headers .= "MIME-Version: 1.0" . "\r\n";
        $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";

        $message = $this->renderTemplate($options['template'], $this->emailData);
        
        $mail = array(
            'to' => $options['to'],
            'headers' => $headers,
            'subject' => $subject,
            'message' => $message
        );
        
        return $mail;

    }
    
    //function to get POST data
    private function getData($key){
        $key = str_replace('[]', '', $key);
        if(isset($_POST[$key])){
            return $_POST[$key];
        }
        return null;
    }
    
    //function to format price
    private function formatPrice($price){
        return $this->formOptions['form']['signBefore'].$price.$this->formOptions['form']['signAfter'];
    }

    //function to fix magic quotes
    private function fixMagicQuotes(){
        if (get_magic_quotes_gpc()) {
            array_walk_recursive($_GET, array($this, 'stripslashes_gpc'));
            array_walk_recursive($_POST, array($this, 'stripslashes_gpc'));
            array_walk_recursive($_COOKIE, array($this, 'stripslashes_gpc'));
            array_walk_recursive($_REQUEST, array($this, 'stripslashes_gpc'));
        }
    }
    
    //function used by fixMagicQuotes recursively
    private function stripslashes_gpc(&$value){
        $value = stripslashes($value);
    }
    
}